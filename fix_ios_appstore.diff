diff --git a/qtmultimedia/src/plugins/avfoundation/camera/avfvideoencodersettingscontrol.mm b/qtmultimedia/src/plugins/avfoundation/camera/avfvideoencodersettingscontrol.mm
index bbb16e7..7c78574 100644
--- a/qtmultimedia/src/plugins/avfoundation/camera/avfvideoencodersettingscontrol.mm
+++ b/qtmultimedia/src/plugins/avfoundation/camera/avfvideoencodersettingscontrol.mm
@@ -209,6 +209,12 @@ NSDictionary *AVFVideoEncoderSettingsControl::applySettings(AVCaptureConnection
     if (!device)
         return nil;

+       AVCaptureVideoStabilizationMode stabilizationMode = AVCaptureVideoStabilizationModeStandard;
+       if ([device.activeFormat isVideoStabilizationModeSupported:stabilizationMode]) {
+               qWarning() << "Setting video stabilization mode to " << stabilizationMode;
+               [connection setPreferredVideoStabilizationMode:stabilizationMode];
+       }
+
     AVFPSRange currentFps = qt_current_framerates(device, connection);
     const bool needFpsChange = m_requestedSettings.frameRate() > 0
                                && m_requestedSettings.frameRate() != currentFps.second;
diff --git a/qtmultimedia/src/plugins/avfoundation/camera/avfcamerasession.mm b/qtmultimedia/src/plugins/avfoundation/camera/avfcamerasession.mm
index 8e3436d..0b7c0e9 100644
--- a/qtmultimedia/src/plugins/avfoundation/camera/avfcamerasession.mm
+++ b/qtmultimedia/src/plugins/avfoundation/camera/avfcamerasession.mm
@@ -234,7 +234,7 @@ void AVFCameraSession::updateCameraDevices()
             break;
         case AVCaptureDevicePositionFront:
             info.position = QCamera::FrontFace;
-            info.orientation = 90;
+            info.orientation = 270;
             break;
         default:
             info.position = QCamera::UnspecifiedPosition;
diff --git a/qtbase/src/corelib/plugin/qfactoryloader.cpp b/qtbase/src/corelib/plugin/qfactoryloader.cpp
index 35c64180..af2eb982 100644
--- a/qtbase/src/corelib/plugin/qfactoryloader.cpp
+++ b/qtbase/src/corelib/plugin/qfactoryloader.cpp
@@ -193,7 +193,11 @@ void QFactoryLoader::update()
             continue;
         d->loadedPaths << pluginDir;

+#if defined Q_OS_IOS && defined QT_NO_DEBUG
+        QString path = pluginDir;
+#else
         QString path = pluginDir + d->suffix;
+#endif

         if (qt_debug_component())
             qDebug() << "QFactoryLoader::QFactoryLoader() checking directory path" << path << "...";
@@ -205,7 +209,11 @@ void QFactoryLoader::update()
 #ifdef Q_OS_WIN
                     QStringList(QStringLiteral("*.dll")),
 #endif
+#ifdef Q_OS_IOS
+                    QDir::Files | QDir::Dirs);
+#else
                     QDir::Files);
+#endif
         QLibraryPrivate *library = 0;

         for (int j = 0; j < plugins.count(); ++j) {
@@ -230,6 +238,18 @@ void QFactoryLoader::update()
                 continue;
             }
 #endif
+
+#ifdef Q_OS_IOS
+			if(fileName.endsWith(".framework")) {
+				QFileInfo fileInfo(fileName);
+				fileName.append("/" + fileInfo.baseName());
+				fileInfo = QFileInfo(fileName);
+				if(!fileInfo.exists()) {
+					continue;
+				}
+			}
+#endif
+
             if (qt_debug_component()) {
                 qDebug() << "QFactoryLoader::QFactoryLoader() looking at" << fileName;
             }
diff --git a/qtbase/src/corelib/plugin/qlibrary.cpp b/qtbase/src/corelib/plugin/qlibrary.cpp
index 29ef697f..514215f3 100644
--- a/qtbase/src/corelib/plugin/qlibrary.cpp
+++ b/qtbase/src/corelib/plugin/qlibrary.cpp
@@ -330,6 +330,21 @@ static bool findPatternUnloaded(const QString &library, QLibraryPrivate *lib)
         }
     }

+#if defined(Q_OS_IOS)
+	if(!ret) {
+		QFile jsonFile(library + ".json");
+		if(jsonFile.exists()) {
+			jsonFile.open(QFile::ReadOnly);
+			auto jsonDocument = QJsonDocument().fromJson(jsonFile.readAll());
+			if(!jsonDocument.isNull()) {
+				if(jsonDocument.isObject()) {
+					lib->metaData = jsonDocument.object();
+					ret = true;
+				}
+			}
+		}
+	}
+#endif
     if (!ret && lib)
         lib->errorString = QLibrary::tr("Failed to extract plugin meta data from '%1'").arg(library);
     file.close();
diff --git a/qtbase/src/corelib/tools/qsimd_p.h b/qtbase/src/corelib/tools/qsimd_p.h
index 9f1321df..30d43100 100644
--- a/qtbase/src/corelib/tools/qsimd_p.h
+++ b/qtbase/src/corelib/tools/qsimd_p.h
@@ -193,7 +193,9 @@

 #  if defined(Q_CC_GNU) && !defined(Q_CC_INTEL)
 // GCC 4.4 and Clang 2.8 added a few more intrinsics there
-#    include <x86intrin.h>
+# if !defined(__EMSCRIPTEN__)
+#  include <x86intrin.h>
+# endif
 #  endif

 #  if defined(Q_CC_MSVC) && (defined(_M_AVX) || defined(__AVX__))
diff --git a/qtbase/src/platformsupport/clipboard/clipboard.pro b/qtbase/src/platformsupport/clipboard/clipboard.pro
index 916f6b0c..882288c2 100644
--- a/qtbase/src/platformsupport/clipboard/clipboard.pro
+++ b/qtbase/src/platformsupport/clipboard/clipboard.pro
@@ -11,5 +11,8 @@ SOURCES += qmacmime.mm

 LIBS += -framework ImageIO
 macos: LIBS_PRIVATE += -framework AppKit
+ios {
+LIBS += -framework MobileCoreServices
+}

 load(qt_module)
diff --git a/qtbase/src/plugins/platforms/ios/qioseventdispatcher.mm b/qtbase/src/plugins/platforms/ios/qioseventdispatcher.mm
index 776343c5..c8edc011 100644
--- a/qtbase/src/plugins/platforms/ios/qioseventdispatcher.mm
+++ b/qtbase/src/plugins/platforms/ios/qioseventdispatcher.mm
@@ -109,7 +109,8 @@ static const long kPageSize = sysconf(_SC_PAGESIZE);
     Note: the diagram does not reflect alignment issues.
 */

-namespace
+Q_LOGGING_CATEGORY(lcEventDispatcher, "qt.eventdispatcher");
+ namespace
 {
     struct Stack
     {
diff --git a/qtdeclarative/src/qml/qml/qqmlimport.cpp b/qtdeclarative/src/qml/qml/qqmlimport.cpp
index 5a136447..07d2cc04 100644
--- a/qtdeclarative/src/qml/qml/qqmlimport.cpp
+++ b/qtdeclarative/src/qml/qml/qqmlimport.cpp
@@ -1907,6 +1907,9 @@ QString QQmlImportDatabase::resolvePlugin(QQmlTypeLoader *typeLoader,
         QLatin1String("_debug.dylib"), // try a qmake-style debug build first
         QLatin1String(".dylib"),
 # else
+#if defined(Q_OS_IOS)
+        QLatin1String(".framework"),
+#endif
         QLatin1String(".dylib"),
         QLatin1String("_debug.dylib"), // try a qmake-style debug build after
 # endif
diff --git a/qtdeclarative/src/qml/qml/qqmltypeloader.cpp b/qtdeclarative/src/qml/qml/qqmltypeloader.cpp
index df6a8f15..b58c3beb 100644
--- a/qtdeclarative/src/qml/qml/qqmltypeloader.cpp
+++ b/qtdeclarative/src/qml/qml/qqmltypeloader.cpp
@@ -1854,6 +1854,17 @@ QString QQmlTypeLoader::absoluteFilePath(const QString &path)
     if (absoluteFilePath.length() > 2 && absoluteFilePath.at(0) != QLatin1Char('/') && absoluteFilePath.at(1) != QLatin1Char(':'))
         absoluteFilePath = QFileInfo(absoluteFilePath).absoluteFilePath();

+#if defined(Q_OS_IOS)
+	if(absoluteFilePath.endsWith(QLatin1String(".framework"))) {
+		QFileInfo fileInfo(absoluteFilePath);
+		absoluteFilePath.append(QLatin1Char('/') + fileInfo.baseName());
+		fileInfo = QFileInfo(absoluteFilePath);
+		if(!fileInfo.exists()) {
+			return QString();
+		}
+	}
+#endif
+
     return absoluteFilePath;
 }

diff --git a/qtdeclarative/tools/qmltime/qmltime.pro b/qtdeclarative/tools/qmltime/qmltime.pro
index 04a5fd59..6a8b7829 100644
--- a/qtdeclarative/tools/qmltime/qmltime.pro
+++ b/qtdeclarative/tools/qmltime/qmltime.pro
@@ -2,6 +2,9 @@ TEMPLATE = app
 TARGET = qmltime
 QT += qml quick
 QT += quick-private
+ios{
+CONFIG -= bitcode
+}
 macx:CONFIG -= app_bundle

 QMAKE_TARGET_DESCRIPTION = QML Time
